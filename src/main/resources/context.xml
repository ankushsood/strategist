<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:security="http://www.springframework.org/schema/security"
	   
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd

			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<!--
		SPRING SETUP 
	 -->

	<!-- Load properties so we can easily change them -->
	<context:property-placeholder location="classpath:application.properties" />
	
	<!-- Enable Annotation Configuration in order to automatically scan controllers-->
	<context:annotation-config />
	
	<!-- Allow @Transactional annotations for transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Search for Rest Resources and configure them automatically -->
	<context:component-scan base-package="com.chikara.strategist.rest.resources" />

	<!--
		DATABASE SETUP 
	 -->

     <!-- Hibernate SessionFactory -->
   	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource"><ref bean="dataSource"/></property>
         <property name="packagesToScan" value="com.chikara.strategist.entity" />
        <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
            <prop key="hibernate.show_sql">true</prop>
			<prop key="hibernate.hbm2ddl.auto">update</prop>
        </props>
        </property>
    </bean>
	
	
	<!--<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="StrategistPersistenceUnit" />
        <property name="packagesToScan" >
            <list>
                <value>com.chikara.strategist.entity</value>
            </list>
        </property>

		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>
	 -->
	
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
        <property name="url"><value>jdbc:mysql://localhost:3306/hms</value></property>
        <property name="username"><value>root</value></property>
        <property name="password"><value>root</value></property>
    </bean>
    
	<bean id="sqlTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">  
		<constructor-arg ref="dataSource"></constructor-arg>  
	</bean>  

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
    	<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<bean id="userDao" class="com.chikara.strategist.dao.JpaUserDao">
		</bean>
	
	
	<bean id="studentDao" class="com.chikara.strategist.dao.StudentDAO" >
		</bean>
	
		
	<bean id="accessTokenDao" class="com.chikara.strategist.dao.accesstoken.JpaAccessTokenDao">
		</bean>
 

	<bean id="userService" class="com.chikara.strategist.service.DaoUserService">
		<constructor-arg ref="accessTokenDao"/>
	</bean>

	<!--
		INIT REST COMPONENTS 
	 -->
	
	<bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	
	<!-- 
		SPRING SECURITY SETUP
	-->
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${app.secret}" />
	</bean>
	
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="userService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<security:http
		entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager"
		create-session="stateless">
		<security:csrf disabled="true"/>
		<security:custom-filter ref="authenticationTokenProcessingFilter" position="PRE_AUTH_FILTER" />
		<security:intercept-url pattern="/rest/user/authenticate" access="permitAll" />
		<security:intercept-url method="GET" pattern="/rest/students/**" access="hasRole('USER')"/>
		<security:intercept-url method="GET" pattern="/rest/blogposts/**" access="hasRole('USER')"/>
		<security:intercept-url method="PUT" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
		<security:intercept-url method="POST" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
		<security:intercept-url method="DELETE" pattern="/rest/blogposts/**" access="hasRole('ADMIN')"/>
		
	</security:http>

	<bean id="unauthorizedEntryPoint" class="com.chikara.strategist.rest.UnauthorizedEntryPoint" />

	<bean id="authenticationTokenProcessingFilter" class="com.chikara.strategist.rest.AuthenticationTokenProcessingFilter">
		<constructor-arg ref="userService"/>
	</bean>



</beans>
